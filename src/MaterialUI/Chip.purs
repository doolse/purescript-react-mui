module MaterialUI.Chip where

-- This file is autogenerated from the typescript binding

import Prelude
import React (ReactClass, ReactElement, createElement)
import Data.Function (applyFlipped)
import MaterialUI.Event (Event)
import MaterialUI.PropTypes (ReactNode, StandardPropsExt, class IsReactType, EventHandler, class IsReactNode, ReactType)
import MaterialUI.Properties (mkPropRecord, IProp, mkProp)
import React (ReactElement)
import Unsafe.Coerce (unsafeCoerce)

foreign import chipClass :: forall props. ReactClass props


type ChipPropsExt r = StandardPropsExt (
  avatar :: ReactElement,
  component :: ReactType,
  deleteIcon :: ReactElement,
  label :: ReactNode,
  onDelete :: EventHandler Event,
  onKeyDown :: EventHandler Event
  | r
) 

type ChipProps = ChipPropsExt (

) 


avatar :: forall r. ReactElement -> IProp (avatar :: ReactElement | r)
avatar = mkProp "avatar"

deleteIcon :: forall r. ReactElement -> IProp (deleteIcon :: ReactElement | r)
deleteIcon = mkProp "deleteIcon"

label :: forall r a. IsReactNode a => a -> IProp (label :: ReactNode | r)
label = mkProp "label" <<< (unsafeCoerce :: a -> ReactNode)

onDelete :: forall r. EventHandler Event -> IProp (onDelete :: EventHandler Event | r)
onDelete = mkProp "onDelete"

onKeyDown :: forall r. EventHandler Event -> IProp (onKeyDown :: EventHandler Event | r)
onKeyDown = mkProp "onKeyDown"

chipU :: forall props. props -> Array ReactElement -> ReactElement
chipU = createElement chipClass

chip :: Array (IProp ChipProps) -> ReactElement
chip = mkPropRecord >>> chipU >>> applyFlipped []

