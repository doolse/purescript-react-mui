module MaterialUI.FormControlLabel where

-- This file is autogenerated from the typescript binding

import Prelude
import MaterialUI.PropTypes (StandardPropsExt, Untyped, ReactNode, class IsReactNode)
import MaterialUI.Properties (mkProp, IProp, mkPropRecord)
import React (ReactElement, createElement, ReactClass)
import Unsafe.Coerce (unsafeCoerce)


type FormControlLabelPropsExt r = StandardPropsExt (
  checked :: Untyped {-UNION["Boolean","String"]-},
  control :: ReactElement,
  disabled :: Boolean,
  inputRef :: Untyped {-React.Ref-},
  label :: ReactNode,
  name :: String,
  onChange :: Untyped {-unknownType:FunctionType-},
  value :: String
  | r
) 

type FormControlLabelProps = FormControlLabelPropsExt (

) 


checked :: forall r a. a -> IProp (checked :: Untyped | r)
checked = mkProp "checked" <<< (unsafeCoerce :: a -> Untyped)

control :: forall r. ReactElement -> IProp (control :: ReactElement | r)
control = mkProp "control"

disabled :: forall r. Boolean -> IProp (disabled :: Boolean | r)
disabled = mkProp "disabled"

inputRef :: forall r a. a -> IProp (inputRef :: Untyped | r)
inputRef = mkProp "inputRef" <<< (unsafeCoerce :: a -> Untyped)

label :: forall r a. IsReactNode a => a -> IProp (label :: ReactNode | r)
label = mkProp "label" <<< (unsafeCoerce :: a -> ReactNode)

name :: forall r. String -> IProp (name :: String | r)
name = mkProp "name"

onChange :: forall r a. a -> IProp (onChange :: Untyped | r)
onChange = mkProp "onChange" <<< (unsafeCoerce :: a -> Untyped)

value :: forall r. String -> IProp (value :: String | r)
value = mkProp "value"

foreign import formControlLabelClass :: forall props. ReactClass props

formControlLabelU :: forall props. props -> Array ReactElement -> ReactElement
formControlLabelU = createElement formControlLabelClass

formControlLabel :: Array (IProp FormControlLabelProps) -> ReactElement
formControlLabel = mkPropRecord >>> formControlLabelU >>> (#) []

