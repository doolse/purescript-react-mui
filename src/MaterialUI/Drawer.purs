module MaterialUI.Drawer where

-- This file is autogenerated from the typescript binding

import Prelude
import MaterialUI.Modal (ModalPropsExt)
import MaterialUI.PropTypes (Untyped)
import MaterialUI.Properties (IProp, class IsProp, mkProp, mkPropRecord)
import React (ReactElement, createElement, ReactClass)
import Unsafe.Coerce (unsafeCoerce)

newtype Anchor = Anchor String
derive newtype instance isPropAnchor :: IsProp Anchor

newtype Variant = Variant String
derive newtype instance isPropVariant :: IsProp Variant

type DrawerPropsExt r = ModalPropsExt (
  anchor :: Anchor,
  elevation :: Int,
  "ModalProps" :: Untyped {-Identifier:Partial-},
  open :: Boolean,
  "PaperProps" :: Untyped {-Identifier:Partial-},
  "SlideProps" :: Untyped {-Identifier:Partial-},
  theme :: Untyped {-Identifier:Theme-},
  transitionDuration :: Untyped {-unknownType:IndexedAccessType-},
  variant :: Variant
  | r
) 

type DrawerProps = DrawerPropsExt (

) 

left :: Anchor
left = Anchor "left"

top :: Anchor
top = Anchor "top"

right :: Anchor
right = Anchor "right"

bottom :: Anchor
bottom = Anchor "bottom"

permanent :: Variant
permanent = Variant "permanent"

persistent :: Variant
persistent = Variant "persistent"

temporary :: Variant
temporary = Variant "temporary"

anchor :: forall r. Anchor -> IProp (anchor :: Anchor | r)
anchor = mkProp "anchor"

elevation :: forall r. Int -> IProp (elevation :: Int | r)
elevation = mkProp "elevation"

modalProps :: forall r a. a -> IProp ("ModalProps" :: Untyped | r)
modalProps = mkProp "ModalProps" <<< (unsafeCoerce :: a -> Untyped)

open :: forall r. Boolean -> IProp (open :: Boolean | r)
open = mkProp "open"

paperProps :: forall r a. a -> IProp ("PaperProps" :: Untyped | r)
paperProps = mkProp "PaperProps" <<< (unsafeCoerce :: a -> Untyped)

slideProps :: forall r a. a -> IProp ("SlideProps" :: Untyped | r)
slideProps = mkProp "SlideProps" <<< (unsafeCoerce :: a -> Untyped)

theme :: forall r a. a -> IProp (theme :: Untyped | r)
theme = mkProp "theme" <<< (unsafeCoerce :: a -> Untyped)

transitionDuration :: forall r a. a -> IProp (transitionDuration :: Untyped | r)
transitionDuration = mkProp "transitionDuration" <<< (unsafeCoerce :: a -> Untyped)

foreign import drawerClass :: forall props. ReactClass props

drawerU :: forall props. props -> Array ReactElement -> ReactElement
drawerU = createElement drawerClass

drawer :: Array (IProp DrawerProps) -> Array ReactElement -> ReactElement
drawer = mkPropRecord >>> drawerU

drawer_ :: Array ReactElement -> ReactElement
drawer_ = drawerU {}
