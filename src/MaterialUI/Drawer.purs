module MaterialUI.Drawer where

-- This file is autogenerated from the typescript binding

import Prelude
import MaterialUI.Modal (ModalPropsExt)
import MaterialUI.PropTypes (Untyped)
import MaterialUI.Properties (Enum, mkProp, IProp, mkPropRecord)
import React (unsafeCreateElement, ReactClass, ReactElement)
import Unsafe.Coerce (unsafeCoerce)

type DrawerPropsExt r = ModalPropsExt (
  anchor :: Enum (left :: String, top :: String, right :: String, bottom :: String),
  elevation :: Int,
  "ModalProps" :: Untyped {-Identifier:Partial-},
  open :: Boolean,
  "PaperProps" :: Untyped {-Identifier:Partial-},
  "SlideProps" :: Untyped {-Identifier:Partial-},
  theme :: Untyped {-Identifier:Theme-},
  transitionDuration :: Untyped {-unknownType:IndexedAccessType-},
  variant :: Enum (permanent :: String, persistent :: String, temporary :: String)
  | r
) 

type DrawerProps = DrawerPropsExt (

) 

left :: forall r. Enum (left :: String | r )
left = unsafeCoerce "left"

top :: forall r. Enum (top :: String | r )
top = unsafeCoerce "top"

right :: forall r. Enum (right :: String | r )
right = unsafeCoerce "right"

bottom :: forall r. Enum (bottom :: String | r )
bottom = unsafeCoerce "bottom"

permanent :: forall r. Enum (permanent :: String | r )
permanent = unsafeCoerce "permanent"

persistent :: forall r. Enum (persistent :: String | r )
persistent = unsafeCoerce "persistent"

temporary :: forall r. Enum (temporary :: String | r )
temporary = unsafeCoerce "temporary"

anchor :: forall r. Enum (left :: String, top :: String, right :: String, bottom :: String) -> IProp (anchor :: Enum (left :: String, top :: String, right :: String, bottom :: String) | r)
anchor = mkProp "anchor"

elevation :: forall r. Int -> IProp (elevation :: Int | r)
elevation = mkProp "elevation"

modalProps :: forall r a. a -> IProp ("ModalProps" :: Untyped | r)
modalProps = mkProp "ModalProps" <<< (unsafeCoerce :: a -> Untyped)

open :: forall r. Boolean -> IProp (open :: Boolean | r)
open = mkProp "open"

paperProps :: forall r a. a -> IProp ("PaperProps" :: Untyped | r)
paperProps = mkProp "PaperProps" <<< (unsafeCoerce :: a -> Untyped)

slideProps :: forall r a. a -> IProp ("SlideProps" :: Untyped | r)
slideProps = mkProp "SlideProps" <<< (unsafeCoerce :: a -> Untyped)

theme :: forall r a. a -> IProp (theme :: Untyped | r)
theme = mkProp "theme" <<< (unsafeCoerce :: a -> Untyped)

transitionDuration :: forall r a. a -> IProp (transitionDuration :: Untyped | r)
transitionDuration = mkProp "transitionDuration" <<< (unsafeCoerce :: a -> Untyped)

foreign import drawerClass :: forall props. ReactClass {|props}

drawerU :: forall props. {|props} -> Array ReactElement -> ReactElement
drawerU = unsafeCreateElement drawerClass

drawer :: Array (IProp DrawerProps) -> Array ReactElement -> ReactElement
drawer = mkPropRecord >>> drawerU

drawer_ :: Array ReactElement -> ReactElement
drawer_ = drawerU {}
