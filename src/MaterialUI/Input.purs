module MaterialUI.Input where

-- This file is autogenerated from the typescript binding

import Prelude
import MaterialUI.PropTypes (Untyped, StandardPropsExt, ReactNode, ReactType, class IsReactNode, class IsReactType)
import MaterialUI.Properties (IProp, mkProp, mkPropRecord)
import React (ReactElement, createElement, ReactClass)
import Unsafe.Coerce (unsafeCoerce)


type InputPropsExt r = StandardPropsExt (
  autoComplete :: String,
  autoFocus :: Boolean,
  defaultValue :: Untyped {-UNION["String","Number"]-},
  disabled :: Boolean,
  disableUnderline :: Boolean,
  endAdornment :: ReactNode,
  error :: Boolean,
  fullWidth :: Boolean,
  id :: String,
  inputComponent :: ReactType,
  inputProps :: Untyped {-UNION[FQN:React.TextareaHTMLAttributes,FQN:React.InputHTMLAttributes]-},
  inputRef :: Untyped {-React.Ref-},
  margin :: Untyped {-'dense'-},
  multiline :: Boolean,
  name :: String,
  placeholder :: String,
  rows :: Untyped {-UNION["String","Number"]-},
  rowsMax :: Untyped {-UNION["String","Number"]-},
  startAdornment :: ReactNode,
  type :: String,
  value :: Untyped {-UNION[Identifier:Array,"String","Number"]-},
  onClean :: Untyped {-unknownType:FunctionType-},
  onDirty :: Untyped {-unknownType:FunctionType-},
  onChange :: Untyped {-React.ChangeEventHandler-},
  onKeyUp :: Untyped {-React.KeyboardEventHandler-},
  onKeyDown :: Untyped {-React.KeyboardEventHandler-}
  | r
) 

type InputProps = InputPropsExt (

) 


autoComplete :: forall r. String -> IProp (autoComplete :: String | r)
autoComplete = mkProp "autoComplete"

autoFocus :: forall r. Boolean -> IProp (autoFocus :: Boolean | r)
autoFocus = mkProp "autoFocus"

defaultValue :: forall r a. a -> IProp (defaultValue :: Untyped | r)
defaultValue = mkProp "defaultValue" <<< (unsafeCoerce :: a -> Untyped)

disabled :: forall r. Boolean -> IProp (disabled :: Boolean | r)
disabled = mkProp "disabled"

disableUnderline :: forall r. Boolean -> IProp (disableUnderline :: Boolean | r)
disableUnderline = mkProp "disableUnderline"

endAdornment :: forall r a. IsReactNode a => a -> IProp (endAdornment :: ReactNode | r)
endAdornment = mkProp "endAdornment" <<< (unsafeCoerce :: a -> ReactNode)

error :: forall r. Boolean -> IProp (error :: Boolean | r)
error = mkProp "error"

fullWidth :: forall r. Boolean -> IProp (fullWidth :: Boolean | r)
fullWidth = mkProp "fullWidth"

id :: forall r. String -> IProp (id :: String | r)
id = mkProp "id"

inputComponent :: forall r a. IsReactType a => a -> IProp (inputComponent :: ReactType | r)
inputComponent = mkProp "inputComponent" <<< (unsafeCoerce :: a -> ReactType)

inputRef :: forall r a. a -> IProp (inputRef :: Untyped | r)
inputRef = mkProp "inputRef" <<< (unsafeCoerce :: a -> Untyped)

margin :: forall r a. a -> IProp (margin :: Untyped | r)
margin = mkProp "margin" <<< (unsafeCoerce :: a -> Untyped)

multiline :: forall r. Boolean -> IProp (multiline :: Boolean | r)
multiline = mkProp "multiline"

name :: forall r. String -> IProp (name :: String | r)
name = mkProp "name"

placeholder :: forall r. String -> IProp (placeholder :: String | r)
placeholder = mkProp "placeholder"

rows :: forall r a. a -> IProp (rows :: Untyped | r)
rows = mkProp "rows" <<< (unsafeCoerce :: a -> Untyped)

rowsMax :: forall r a. a -> IProp (rowsMax :: Untyped | r)
rowsMax = mkProp "rowsMax" <<< (unsafeCoerce :: a -> Untyped)

startAdornment :: forall r a. IsReactNode a => a -> IProp (startAdornment :: ReactNode | r)
startAdornment = mkProp "startAdornment" <<< (unsafeCoerce :: a -> ReactNode)

value :: forall r a. a -> IProp (value :: Untyped | r)
value = mkProp "value" <<< (unsafeCoerce :: a -> Untyped)

onClean :: forall r a. a -> IProp (onClean :: Untyped | r)
onClean = mkProp "onClean" <<< (unsafeCoerce :: a -> Untyped)

onDirty :: forall r a. a -> IProp (onDirty :: Untyped | r)
onDirty = mkProp "onDirty" <<< (unsafeCoerce :: a -> Untyped)

onChange :: forall r a. a -> IProp (onChange :: Untyped | r)
onChange = mkProp "onChange" <<< (unsafeCoerce :: a -> Untyped)

onKeyUp :: forall r a. a -> IProp (onKeyUp :: Untyped | r)
onKeyUp = mkProp "onKeyUp" <<< (unsafeCoerce :: a -> Untyped)

onKeyDown :: forall r a. a -> IProp (onKeyDown :: Untyped | r)
onKeyDown = mkProp "onKeyDown" <<< (unsafeCoerce :: a -> Untyped)

foreign import inputClass :: forall props. ReactClass props

inputU :: forall props. props -> Array ReactElement -> ReactElement
inputU = createElement inputClass

input :: Array (IProp InputProps) -> Array ReactElement -> ReactElement
input = mkPropRecord >>> inputU

input_ :: Array ReactElement -> ReactElement
input_ = inputU {}
