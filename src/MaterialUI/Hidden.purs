module MaterialUI.Hidden where

-- This file is autogenerated from the typescript binding

import Prelude
import MaterialUI.PropTypes (Untyped, StandardPropsExt)
import MaterialUI.Properties (class IsProp, mkProp, IProp, mkPropRecord)
import React (ReactElement, createElement, ReactClass)
import Unsafe.Coerce (unsafeCoerce)

newtype Implementation = Implementation String
derive newtype instance isPropImplementation :: IsProp Implementation

type HiddenPropsExt r = StandardPropsExt (
  implementation :: Implementation,
  initialWidth :: Untyped {-Identifier:Breakpoint-},
  lgDown :: Boolean,
  lgUp :: Boolean,
  mdDown :: Boolean,
  mdUp :: Boolean,
  only :: Untyped {-UNION[Identifier:Breakpoint,Identifier:Array]-},
  smDown :: Boolean,
  smUp :: Boolean,
  xlDown :: Boolean,
  xlUp :: Boolean,
  xsDown :: Boolean,
  xsUp :: Boolean
  | r
) 

type HiddenProps = HiddenPropsExt (

) 

js :: Implementation
js = Implementation "js"

css :: Implementation
css = Implementation "css"

implementation :: forall r. Implementation -> IProp (implementation :: Implementation | r)
implementation = mkProp "implementation"

initialWidth :: forall r a. a -> IProp (initialWidth :: Untyped | r)
initialWidth = mkProp "initialWidth" <<< (unsafeCoerce :: a -> Untyped)

lgDown :: forall r. Boolean -> IProp (lgDown :: Boolean | r)
lgDown = mkProp "lgDown"

lgUp :: forall r. Boolean -> IProp (lgUp :: Boolean | r)
lgUp = mkProp "lgUp"

mdDown :: forall r. Boolean -> IProp (mdDown :: Boolean | r)
mdDown = mkProp "mdDown"

mdUp :: forall r. Boolean -> IProp (mdUp :: Boolean | r)
mdUp = mkProp "mdUp"

only :: forall r a. a -> IProp (only :: Untyped | r)
only = mkProp "only" <<< (unsafeCoerce :: a -> Untyped)

smDown :: forall r. Boolean -> IProp (smDown :: Boolean | r)
smDown = mkProp "smDown"

smUp :: forall r. Boolean -> IProp (smUp :: Boolean | r)
smUp = mkProp "smUp"

xlDown :: forall r. Boolean -> IProp (xlDown :: Boolean | r)
xlDown = mkProp "xlDown"

xlUp :: forall r. Boolean -> IProp (xlUp :: Boolean | r)
xlUp = mkProp "xlUp"

xsDown :: forall r. Boolean -> IProp (xsDown :: Boolean | r)
xsDown = mkProp "xsDown"

xsUp :: forall r. Boolean -> IProp (xsUp :: Boolean | r)
xsUp = mkProp "xsUp"

foreign import hiddenClass :: forall props. ReactClass props

hiddenU :: forall props. props -> Array ReactElement -> ReactElement
hiddenU = createElement hiddenClass

hidden :: Array (IProp HiddenProps) -> Array ReactElement -> ReactElement
hidden = mkPropRecord >>> hiddenU

hidden_ :: Array ReactElement -> ReactElement
hidden_ = hiddenU {}
