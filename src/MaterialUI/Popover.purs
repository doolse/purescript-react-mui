module MaterialUI.Popover where

-- This file is autogenerated from the typescript binding

import Prelude
import React (ReactClass, ReactElement, createElement)
import MaterialUI.Modal (ModalPropsExt)
import MaterialUI.PropTypes (Untyped, ReactType, class IsReactType)
import MaterialUI.Properties (IProp, mkProp, mkPropRecord)
import Unsafe.Coerce (unsafeCoerce)

foreign import popoverClass :: forall props. ReactClass props


type PopoverPropsExt r = ModalPropsExt (
  action :: Untyped {-unknownType:FunctionType-},
  anchorEl :: Untyped {-Identifier:HTMLElement-},
  anchorOrigin :: Untyped {-Identifier:PopoverOrigin-},
  anchorPosition :: Untyped {-Identifier:PopoverPosition-},
  anchorReference :: Untyped {-Identifier:PopoverReference-},
  elevation :: Int,
  getContentAnchorEl :: Untyped {-unknownType:FunctionType-},
  marginThreshold :: Int,
  modal :: Boolean,
  "PaperProps" :: Untyped {-Identifier:Partial-},
  role :: String,
  transformOrigin :: Untyped {-Identifier:PopoverOrigin-},
  transition :: ReactType,
  transitionDuration :: Untyped {-Identifier:TransitionDuration-}
  | r
) 

type PopoverProps = PopoverPropsExt (

) 


action :: forall r. Untyped -> IProp (action :: Untyped | r)
action = mkProp "action"

anchorEl :: forall r. Untyped -> IProp (anchorEl :: Untyped | r)
anchorEl = mkProp "anchorEl"

anchorOrigin :: forall r. Untyped -> IProp (anchorOrigin :: Untyped | r)
anchorOrigin = mkProp "anchorOrigin"

anchorPosition :: forall r. Untyped -> IProp (anchorPosition :: Untyped | r)
anchorPosition = mkProp "anchorPosition"

anchorReference :: forall r. Untyped -> IProp (anchorReference :: Untyped | r)
anchorReference = mkProp "anchorReference"

elevation :: forall r. Int -> IProp (elevation :: Int | r)
elevation = mkProp "elevation"

getContentAnchorEl :: forall r. Untyped -> IProp (getContentAnchorEl :: Untyped | r)
getContentAnchorEl = mkProp "getContentAnchorEl"

marginThreshold :: forall r. Int -> IProp (marginThreshold :: Int | r)
marginThreshold = mkProp "marginThreshold"

modal :: forall r. Boolean -> IProp (modal :: Boolean | r)
modal = mkProp "modal"

paperProps :: forall r. Untyped -> IProp ("PaperProps" :: Untyped | r)
paperProps = mkProp "PaperProps"

role :: forall r. String -> IProp (role :: String | r)
role = mkProp "role"

transformOrigin :: forall r. Untyped -> IProp (transformOrigin :: Untyped | r)
transformOrigin = mkProp "transformOrigin"

transition :: forall r a. IsReactType a => a -> IProp (transition :: ReactType | r)
transition = mkProp "transition" <<< (unsafeCoerce :: a -> ReactType)

transitionDuration :: forall r. Untyped -> IProp (transitionDuration :: Untyped | r)
transitionDuration = mkProp "transitionDuration"

popoverU :: forall props. props -> Array ReactElement -> ReactElement
popoverU = createElement popoverClass

popover :: Array (IProp PopoverProps) -> Array ReactElement -> ReactElement
popover = mkPropRecord >>> popoverU

popover_ :: Array ReactElement -> ReactElement
popover_ = popoverU {}

