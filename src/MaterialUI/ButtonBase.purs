module MaterialUI.ButtonBase where

-- This file is autogenerated from the typescript binding

import Prelude
import React (ReactClass, ReactElement, createElement)
import MaterialUI.PropTypes (Untyped, StandardPropsExt, EventHandler, class IsReactType, ReactType)
import MaterialUI.Properties (mkProp, mkPropRecord, IProp)
import Prelude (Unit)
import Unsafe.Coerce (unsafeCoerce)

foreign import buttonBaseClass :: forall props. ReactClass props


type ButtonBasePropsExt r = StandardPropsExt (
  buttonRef :: Untyped {-React.Ref-},
  centerRipple :: Boolean,
  component :: ReactType,
  disableRipple :: Boolean,
  focusRipple :: Boolean,
  keyboardFocusedClassName :: String,
  onKeyboardFocus :: Untyped {-React.FocusEventHandler-},
  onClick :: EventHandler (Unit)
  | r
) 

type ButtonBaseProps = ButtonBasePropsExt (

) 


buttonRef :: forall r. Untyped -> IProp (buttonRef :: Untyped | r)
buttonRef = mkProp "buttonRef"

centerRipple :: forall r. Boolean -> IProp (centerRipple :: Boolean | r)
centerRipple = mkProp "centerRipple"

disableRipple :: forall r. Boolean -> IProp (disableRipple :: Boolean | r)
disableRipple = mkProp "disableRipple"

focusRipple :: forall r. Boolean -> IProp (focusRipple :: Boolean | r)
focusRipple = mkProp "focusRipple"

keyboardFocusedClassName :: forall r. String -> IProp (keyboardFocusedClassName :: String | r)
keyboardFocusedClassName = mkProp "keyboardFocusedClassName"

onKeyboardFocus :: forall r. Untyped -> IProp (onKeyboardFocus :: Untyped | r)
onKeyboardFocus = mkProp "onKeyboardFocus"

onClick :: forall r. EventHandler (Unit) -> IProp (onClick :: EventHandler (Unit) | r)
onClick = mkProp "onClick"

buttonBaseU :: forall props. props -> Array ReactElement -> ReactElement
buttonBaseU = createElement buttonBaseClass

buttonBase :: Array (IProp ButtonBaseProps) -> Array ReactElement -> ReactElement
buttonBase = mkPropRecord >>> buttonBaseU

buttonBase_ :: Array ReactElement -> ReactElement
buttonBase_ = buttonBaseU {}

