module MaterialUI.CardHeader where

-- This file is autogenerated from the typescript binding

import Prelude
import MaterialUI.PropTypes (StandardPropsExt, ReactNode, ReactType, class IsReactNode, Untyped)
import MaterialUI.Properties (mkProp, mkPropRecord, IProp)
import React (ReactElement, ReactClass, unsafeCreateElement)
import Unsafe.Coerce (unsafeCoerce)

type CardHeaderPropsExt r = StandardPropsExt (
  action :: ReactNode,
  avatar :: ReactNode,
  component :: ReactType,
  disableTypography :: Boolean,
  subheader :: ReactNode,
  subheaderTypographyProps :: Untyped {-Identifier:Partial-},
  title :: ReactNode,
  titleTypographyProps :: Untyped {-Identifier:Partial-}
  | r
) 

type CardHeaderProps = CardHeaderPropsExt (

) 


action :: forall r a. IsReactNode a => a -> IProp (action :: ReactNode | r)
action = mkProp "action" <<< (unsafeCoerce :: a -> ReactNode)

avatar :: forall r a. IsReactNode a => a -> IProp (avatar :: ReactNode | r)
avatar = mkProp "avatar" <<< (unsafeCoerce :: a -> ReactNode)

disableTypography :: forall r. Boolean -> IProp (disableTypography :: Boolean | r)
disableTypography = mkProp "disableTypography"

subheader :: forall r a. IsReactNode a => a -> IProp (subheader :: ReactNode | r)
subheader = mkProp "subheader" <<< (unsafeCoerce :: a -> ReactNode)

subheaderTypographyProps :: forall r a. a -> IProp (subheaderTypographyProps :: Untyped | r)
subheaderTypographyProps = mkProp "subheaderTypographyProps" <<< (unsafeCoerce :: a -> Untyped)

title :: forall r a. IsReactNode a => a -> IProp (title :: ReactNode | r)
title = mkProp "title" <<< (unsafeCoerce :: a -> ReactNode)

titleTypographyProps :: forall r a. a -> IProp (titleTypographyProps :: Untyped | r)
titleTypographyProps = mkProp "titleTypographyProps" <<< (unsafeCoerce :: a -> Untyped)

foreign import cardHeaderClass :: forall props. ReactClass {|props}

cardHeaderU :: forall props. {|props} -> Array ReactElement -> ReactElement
cardHeaderU = unsafeCreateElement cardHeaderClass

cardHeader :: Array (IProp CardHeaderProps) -> Array ReactElement -> ReactElement
cardHeader = mkPropRecord >>> cardHeaderU

cardHeader_ :: Array ReactElement -> ReactElement
cardHeader_ = cardHeaderU {}
