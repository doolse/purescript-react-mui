module MaterialUI.TextField where

-- This file is autogenerated from the typescript binding

import Prelude
import React (ReactClass, ReactElement, createElement)
import MaterialUI.PropTypes (Untyped, StandardPropsExt, ReactNode, class IsReactNode)
import MaterialUI.Properties (mkProp, IProp, mkPropRecord)
import Unsafe.Coerce (unsafeCoerce)

foreign import textFieldClass :: forall props. ReactClass props


type TextFieldPropsExt r = StandardPropsExt (
  autoComplete :: String,
  autoFocus :: Boolean,
  defaultValue :: Untyped {-UNION["String","Number"]-},
  disabled :: Boolean,
  error :: Boolean,
  "FormHelperTextProps" :: Untyped {-Identifier:FormHelperTextProps-},
  fullWidth :: Boolean,
  helperText :: ReactNode,
  helperTextClassName :: String,
  id :: String,
  "InputLabelProps" :: Untyped {-Identifier:InputLabelProps-},
  "InputProps" :: Untyped {-Identifier:InputProps-},
  inputProps :: Untyped {-unknownType:IndexedAccessType-},
  inputRef :: Untyped {-React.Ref-},
  label :: ReactNode,
  labelClassName :: String,
  margin :: Untyped {-PropTypes.Margin-},
  multiline :: Boolean,
  name :: String,
  onChange :: Untyped {-React.ChangeEventHandler-},
  placeholder :: String,
  required :: Boolean,
  rows :: Untyped {-UNION["String","Number"]-},
  rowsMax :: Untyped {-UNION["String","Number"]-},
  select :: Boolean,
  "SelectProps" :: Untyped {-Identifier:SelectProps-},
  type :: String,
  value :: Untyped {-UNION[Identifier:Array,"String","Number"]-}
  | r
) 

type TextFieldProps = TextFieldPropsExt (

) 


autoComplete :: forall r. String -> IProp (autoComplete :: String | r)
autoComplete = mkProp "autoComplete"

autoFocus :: forall r. Boolean -> IProp (autoFocus :: Boolean | r)
autoFocus = mkProp "autoFocus"

defaultValue :: forall r. Untyped -> IProp (defaultValue :: Untyped | r)
defaultValue = mkProp "defaultValue"

disabled :: forall r. Boolean -> IProp (disabled :: Boolean | r)
disabled = mkProp "disabled"

error :: forall r. Boolean -> IProp (error :: Boolean | r)
error = mkProp "error"

formHelperTextProps :: forall r. Untyped -> IProp ("FormHelperTextProps" :: Untyped | r)
formHelperTextProps = mkProp "FormHelperTextProps"

fullWidth :: forall r. Boolean -> IProp (fullWidth :: Boolean | r)
fullWidth = mkProp "fullWidth"

helperText :: forall r a. IsReactNode a => a -> IProp (helperText :: ReactNode | r)
helperText = mkProp "helperText" <<< (unsafeCoerce :: a -> ReactNode)

helperTextClassName :: forall r. String -> IProp (helperTextClassName :: String | r)
helperTextClassName = mkProp "helperTextClassName"

id :: forall r. String -> IProp (id :: String | r)
id = mkProp "id"

inputLabelProps :: forall r. Untyped -> IProp ("InputLabelProps" :: Untyped | r)
inputLabelProps = mkProp "InputLabelProps"

inputProps :: forall r. Untyped -> IProp ("InputProps" :: Untyped | r)
inputProps = mkProp "InputProps"

inputRef :: forall r. Untyped -> IProp (inputRef :: Untyped | r)
inputRef = mkProp "inputRef"

label :: forall r a. IsReactNode a => a -> IProp (label :: ReactNode | r)
label = mkProp "label" <<< (unsafeCoerce :: a -> ReactNode)

labelClassName :: forall r. String -> IProp (labelClassName :: String | r)
labelClassName = mkProp "labelClassName"

margin :: forall r. Untyped -> IProp (margin :: Untyped | r)
margin = mkProp "margin"

multiline :: forall r. Boolean -> IProp (multiline :: Boolean | r)
multiline = mkProp "multiline"

name :: forall r. String -> IProp (name :: String | r)
name = mkProp "name"

onChange :: forall r. Untyped -> IProp (onChange :: Untyped | r)
onChange = mkProp "onChange"

placeholder :: forall r. String -> IProp (placeholder :: String | r)
placeholder = mkProp "placeholder"

required :: forall r. Boolean -> IProp (required :: Boolean | r)
required = mkProp "required"

rows :: forall r. Untyped -> IProp (rows :: Untyped | r)
rows = mkProp "rows"

rowsMax :: forall r. Untyped -> IProp (rowsMax :: Untyped | r)
rowsMax = mkProp "rowsMax"

select :: forall r. Boolean -> IProp (select :: Boolean | r)
select = mkProp "select"

selectProps :: forall r. Untyped -> IProp ("SelectProps" :: Untyped | r)
selectProps = mkProp "SelectProps"

value :: forall r. Untyped -> IProp (value :: Untyped | r)
value = mkProp "value"

textFieldU :: forall props. props -> Array ReactElement -> ReactElement
textFieldU = createElement textFieldClass

textField :: Array (IProp TextFieldProps) -> Array ReactElement -> ReactElement
textField = mkPropRecord >>> textFieldU

textField_ :: Array ReactElement -> ReactElement
textField_ = textFieldU {}

