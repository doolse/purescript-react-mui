module MaterialUI.Tooltip where

-- This file is autogenerated from the typescript binding

import Prelude
import MaterialUI.PropTypes (Untyped, ReactNode, StandardPropsExt, class IsReactNode)
import MaterialUI.Properties (mkProp, IProp, Enum, mkPropRecord)
import React (ReactElement, createElement, ReactClass)
import Unsafe.Coerce (unsafeCoerce)

type TooltipPropsExt r = StandardPropsExt (
  disableFocusListener :: Boolean,
  disableHoverListener :: Boolean,
  disableTouchListener :: Boolean,
  enterDelay :: Int,
  enterTouchDelay :: Int,
  id :: String,
  leaveDelay :: Int,
  leaveTouchDelay :: Int,
  onClose :: Untyped {-unknownType:FunctionType-},
  onOpen :: Untyped {-unknownType:FunctionType-},
  open :: Boolean,
  placement :: Enum ("bottom-end" :: String, "bottom-start" :: String, bottom :: String, "left-end" :: String, "left-start" :: String, left :: String, "right-end" :: String, "right-start" :: String, right :: String, "top-end" :: String, "top-start" :: String, top :: String),
  "PopperProps" :: Untyped {-Identifier:Partial-},
  title :: ReactNode
  | r
) 

type TooltipProps = TooltipPropsExt (

) 

bottomEnd :: forall r. Enum ("bottom-end" :: String | r )
bottomEnd = unsafeCoerce "bottom-end"

bottomStart :: forall r. Enum ("bottom-start" :: String | r )
bottomStart = unsafeCoerce "bottom-start"

bottom :: forall r. Enum (bottom :: String | r )
bottom = unsafeCoerce "bottom"

leftEnd :: forall r. Enum ("left-end" :: String | r )
leftEnd = unsafeCoerce "left-end"

leftStart :: forall r. Enum ("left-start" :: String | r )
leftStart = unsafeCoerce "left-start"

left :: forall r. Enum (left :: String | r )
left = unsafeCoerce "left"

rightEnd :: forall r. Enum ("right-end" :: String | r )
rightEnd = unsafeCoerce "right-end"

rightStart :: forall r. Enum ("right-start" :: String | r )
rightStart = unsafeCoerce "right-start"

right :: forall r. Enum (right :: String | r )
right = unsafeCoerce "right"

topEnd :: forall r. Enum ("top-end" :: String | r )
topEnd = unsafeCoerce "top-end"

topStart :: forall r. Enum ("top-start" :: String | r )
topStart = unsafeCoerce "top-start"

top :: forall r. Enum (top :: String | r )
top = unsafeCoerce "top"

disableFocusListener :: forall r. Boolean -> IProp (disableFocusListener :: Boolean | r)
disableFocusListener = mkProp "disableFocusListener"

disableHoverListener :: forall r. Boolean -> IProp (disableHoverListener :: Boolean | r)
disableHoverListener = mkProp "disableHoverListener"

disableTouchListener :: forall r. Boolean -> IProp (disableTouchListener :: Boolean | r)
disableTouchListener = mkProp "disableTouchListener"

enterDelay :: forall r. Int -> IProp (enterDelay :: Int | r)
enterDelay = mkProp "enterDelay"

enterTouchDelay :: forall r. Int -> IProp (enterTouchDelay :: Int | r)
enterTouchDelay = mkProp "enterTouchDelay"

id :: forall r. String -> IProp (id :: String | r)
id = mkProp "id"

leaveDelay :: forall r. Int -> IProp (leaveDelay :: Int | r)
leaveDelay = mkProp "leaveDelay"

leaveTouchDelay :: forall r. Int -> IProp (leaveTouchDelay :: Int | r)
leaveTouchDelay = mkProp "leaveTouchDelay"

onClose :: forall r a. a -> IProp (onClose :: Untyped | r)
onClose = mkProp "onClose" <<< (unsafeCoerce :: a -> Untyped)

onOpen :: forall r a. a -> IProp (onOpen :: Untyped | r)
onOpen = mkProp "onOpen" <<< (unsafeCoerce :: a -> Untyped)

open :: forall r. Boolean -> IProp (open :: Boolean | r)
open = mkProp "open"

placement :: forall r. Enum ("bottom-end" :: String, "bottom-start" :: String, bottom :: String, "left-end" :: String, "left-start" :: String, left :: String, "right-end" :: String, "right-start" :: String, right :: String, "top-end" :: String, "top-start" :: String, top :: String) -> IProp (placement :: Enum ("bottom-end" :: String, "bottom-start" :: String, bottom :: String, "left-end" :: String, "left-start" :: String, left :: String, "right-end" :: String, "right-start" :: String, right :: String, "top-end" :: String, "top-start" :: String, top :: String) | r)
placement = mkProp "placement"

popperProps :: forall r a. a -> IProp ("PopperProps" :: Untyped | r)
popperProps = mkProp "PopperProps" <<< (unsafeCoerce :: a -> Untyped)

title :: forall r a. IsReactNode a => a -> IProp (title :: ReactNode | r)
title = mkProp "title" <<< (unsafeCoerce :: a -> ReactNode)

foreign import tooltipClass :: forall props. ReactClass props

tooltipU :: forall props. props -> Array ReactElement -> ReactElement
tooltipU = createElement tooltipClass

tooltip :: Array (IProp TooltipProps) -> Array ReactElement -> ReactElement
tooltip = mkPropRecord >>> tooltipU

tooltip_ :: Array ReactElement -> ReactElement
tooltip_ = tooltipU {}
